services:
  neo4j-db:
    image: neo4j:2025.01.0-community-bullseye
    ports:
      - 7474:7474
      - 7687:7687
    restart: always
    environment:
      NEO4J_AUTH: neo4j/neo4jpass

  graph-db:
    image: apache/age:release_PG16_1.5.0
    platform: linux/amd64
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - app-db-data:/var/lib/postgresql/data

  graph-api:
    image: graph-app:latest
    ports:
      - 8080:80
    depends_on:
      - graph-db
    env_file:
      - .env
    volumes:
      - type: bind
        source: ./graph_api
        target: /app/graph_api
        read_only: true
      - type: bind
        source: ./common
        target: /app/common
        read_only: true
    build:
      context: ./
      dockerfile: graph_api/Dockerfile
    entrypoint: >
      /bin/sh -c "
      set -e ;
      fastapi run graph_api/main.py --host 0.0.0.0 --port 80 --reload
      "

  zookeeper:
    image: quay.io/debezium/zookeeper:latest
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888

  kafka:
    image: quay.io/debezium/kafka:latest
    ports:
      - 9092:9092
    links:
      - zookeeper
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.5.2
    ports:
      - 9200:9200
    environment:
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - xpack.security.enabled=false

  debezium:
    image: debezium/connect:2.4
    depends_on:
      graph-db:
        condition: service_started
    ports:
      - 8083:8083
      - 5005:5005
    links:
      - kafka
      - graph-db
      - elasticsearch
    env_file:
      - .env
    environment:
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=dbz_connect_configs
      - OFFSET_STORAGE_TOPIC=dbz_connect_offsets
      - STATUS_STORAGE_TOPIC=dbz_connect_statuses
      - BOOTSTRAP_SERVERS=kafka:9092

  # zoo1:
  #   image: zookeeper
  #   restart: always
  #   hostname: zoo1
  #   ports:
  #     - 2181:2181
  #   environment:
  #     ZOO_MY_ID: 1
  #     ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=zoo3:2888:3888;2181

  # debezium:
  #   image: debezium/connect:2.4
  #   depends_on:
  #     meta-db:
  #       condition: service_started
  #   env_file:
  #     - .env
  #   environment:
  #     - GROUP_ID=1
  #     - CONFIG_STORAGE_TOPIC=dbz-connect-configs
  #     - OFFSET_STORAGE_TOPIC=dbz-connect-offsets
  #     - STATUS_STORAGE_TOPIC=dbz-connect-statuses
  #     - BOOTSTRAP_SERVERS=${EVENTHUB_NAMESPACE}.servicebus.windows.net:9093
  #     - CONNECT_DEBEZIUM_SINK_TYPE=eventhubs
  #     - CONNECT_DEBEZIUM_SINK_EVENTHUBS_CONNECTIONSTRING="${EVENTHUB_CONNECTION_STRING}"
  #     - CONNECT_SECURITY_PROTOCOL=SASL_SSL
  #     - CONNECT_SASL_MECHANISM=PLAIN
  #     - CONNECT_SASL_JAAS_CONFIG=org.apache.kafka.common.security.plain.PlainLoginModule required username="$$ConnectionString" password="${EVENTHUB_CONNECTION_STRING}"; # Double dollar-sign: https://github.com/provectus/kafka-ui/issues/3587
  #     - CONNECT_PRODUCER_SECURITY_PROTOCOL=SASL_SSL
  #     - CONNECT_PRODUCER_SASL_MECHANISM=PLAIN
  #     - CONNECT_PRODUCER_SASL_JAAS_CONFIG=org.apache.kafka.common.security.plain.PlainLoginModule required username="$$ConnectionString" password="${EVENTHUB_CONNECTION_STRING}";
  #   ports:
  #     - 8083:8083

  # broker:
  #   # https://hub.docker.com/r/apache/kafka
  #   image: apache/kafka:latest
  #   container_name: broker
  #   environment:
  #     KAFKA_NODE_ID: 1
  #     KAFKA_PROCESS_ROLES: broker,controller
  #     KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
  #     KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_NUM_PARTITIONS: 3

volumes:
  app-db-data:
