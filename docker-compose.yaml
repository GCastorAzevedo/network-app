services:
  neo4j-db:
    image: neo4j:2025.01.0-community-bullseye
    ports:
      - 7474:7474
      - 7687:7687
    restart: always
    environment:
      NEO4J_AUTH: neo4j/neo4jpass

  graph-db:
    image: apache/age:release_PG16_1.5.0
    platform: linux/amd64
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - app-db-data:/var/lib/postgresql/data

  graph-api:
    image: graph-app:latest
    ports:
      - 8080:80
    depends_on:
      - graph-db
    env_file:
      - .env
    volumes:
      - type: bind
        source: ./graph_api
        target: /app/graph_api
        read_only: true
      - type: bind
        source: ./common
        target: /app/common
        read_only: true
    build:
      context: ./
      dockerfile: graph_api/Dockerfile
    entrypoint: >
      /bin/sh -c "
      set -e ;
      fastapi run graph_api/main.py --host 0.0.0.0 --port 80 --reload
      "

  zookeeper:
    image: quay.io/debezium/zookeeper:latest
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888

  kafka:
    image: quay.io/debezium/kafka:latest
    ports:
      - 9092:9092
    links:
      - zookeeper
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.5.2
    ports:
      - 9200:9200
    environment:
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - xpack.security.enabled=false

  debezium:
    image: debezium/connect:2.4
    depends_on:
      graph-db:
        condition: service_started
    ports:
      - 8083:8083
      - 5005:5005
    links:
      - kafka
      - graph-db
      - elasticsearch
    env_file:
      - .env
    environment:
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=dbz_connect_configs
      - OFFSET_STORAGE_TOPIC=dbz_connect_offsets
      - STATUS_STORAGE_TOPIC=dbz_connect_statuses
      - BOOTSTRAP_SERVERS=kafka:9092

  kafka-connect:
    image: confluentinc/cp-kafka-connect:latest #7.6.0 7.9.0
    ports:
      - 8084:8084
    depends_on:
      - zookeeper
      - kafka
      - elasticsearch
    links:
      - kafka
      - elasticsearch
    volumes:
      - ./connect-plugins:/connect-plugins
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_GROUP_ID: "connect-cluster"
      CONNECT_CONFIG_STORAGE_TOPIC: connect-config
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/connect-plugins"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_REST_ADVERTISED_PORT: 8084
      CONNECT_LISTENERS: "http://kafka-connect:8084"
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_LOG4J_LOGGERS: "org.reflections=ERROR"

volumes:
  app-db-data:
